from django.db import models

import subprocess
import os
import uuid

class Openvpn(models.Model):
    name = models.CharField(max_length=255, unique=True)
    description = models.TextField(blank=True, null=True)
    port = models.IntegerField(default=1194)
    tun_ip = models.GenericIPAddressField()

    def __str__(self):
        return self.name

class OpenvpnClient(Openvpn):
    gateway = models.CharField(max_length=255)
    server_ip = models.GenericIPAddressField()
    static_key = models.TextField()

    def save(self, *args, **kwargs):
        configfile = "/tmp/%s.conf" % self.name
        keyfile = "/tmp/%s.key" % self.name
        with open(keyfile, "w") as kf:
            kf.write(self.static_key)
        with open(configfile, "w") as cf:
            cf.write("# autogenerated configuration\n")
            cf.write("# for %s. Do not edit!\n")
            cf.write("remote %s\n" % self.gateway)
            cf.write("port %d\n" % self.port)
            cf.write("dev tun\n")
            cf.write("ifconfig %s %s\n" % (self.tun_ip, self.server_ip))

# saved for later use in server model
#        genkeycmd = "openvpn --genkey --secret %s" % keyfile
#        p = subprocess.Popen(genkeycmd)
#        if p.wait() != 0:
#            raise Exception("could not generate static key")

        deploycmd = "sudo /usr/local/bin/deployconfig.sh %s" % self.name
        p = subprocess.Popen(deploycmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, shell=True)
        if p.wait() != 0:
            raise Exception("could not deploy config and/or key file(s)")

        super(OpenvpnClient, self).save(*args, **kwargs)

    def delete(self, *args, **kwargs):
        rmcmd = "sudo /usr/local/bin/rmconfig.sh %s" % self.name
        p = subprocess.Popen(rmcmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, shell=True)
        if p.wait() != 0:
            raise Exception("could not delete config and/or key file(s)")

        super(OpenvpnClient, self).delete(*args, **kwargs)

class OpenvpnServer(Openvpn):
    client_ip = models.GenericIPAddressField()
    static_key = models.TextField()

    tmpkeyname = None

    def __init__(self):
 
        # create key
        # TODO: remove temp key file also if object was not been saved
        self.tmpkeyname = str(uuid.uuid4())
        if not self.static_key:
            keycmd = "openvpn --genkey --secure /tmp/%s.key" % self.tmpkeyname
            p = subprocess.Popen(keycmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, shell=True)
            if p.wait() != 0:
                raise Exception("could not create temp key")
            with open("/tmp/%s.key" % self.tmpkeyname, 'r') as tmpk:
                self.static_key = tmpk.readlines()
            os.remove("/tmp/%s.key" % self.tmpkeyname)







